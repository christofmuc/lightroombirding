<!--
    Before use:
    * be sure to have a 32bit luac installed
    * configure property ${luac} including full path
    * configure property ${svnversion} including full path

    If you want to use the install target:
    * configure property ${lrPluginFolder} including full path

    Thanks to Rob Cole for this!
    https://www.assembla.com/spaces/lrdevplugin/wiki/%28Mac-Win%29_IntelliJ_and_LUA
-->
<project
        name="LightroomBirding"
        default="dist"
        basedir="."
        >
    <property name="src" location="lightroomBirding.lrdevplugin"/>
    <property name="resources" location="resources"/>
    <property name="build" location="build"/>
    <property name="dist" location="dist"/>

    <property name="pluginFolderName" value="${ant.project.name}.lrplugin"/>
    <property name="pluginFolder" location="${build}/${pluginFolderName}"/>
    <property name="pluginDeploymentUnit" location="${dist}/${pluginFolderName}.zip"/>

    <target name="clean">
        <delete dir="${build}"/>
        <delete dir="${dist}"/>
    </target>

    <target name="init" depends="clean">
        <mkdir dir="${pluginFolder}"/>
        <mkdir dir="${dist}"/>
    </target>

    <target name="copy-resources" depends="init">
        <copy todir="${pluginFolder}">
            <fileset dir="${resources}" casesensitive="yes">
                <include name="**/*"/>
            </fileset>
        </copy>

        <copy overwrite="true" file="${pluginFolder}/TranslatedStrings_fr.txt"
              tofile="${pluginFolder}/TranslatedStrings_es.txt"/>
        <copy overwrite="true" file="${pluginFolder}/TranslatedStrings_fr.txt"
              tofile="${pluginFolder}/TranslatedStrings_it.txt"/>
        <copy overwrite="true" file="${pluginFolder}/TranslatedStrings_fr.txt"
              tofile="${pluginFolder}/TranslatedStrings_ja.txt"/>
        <copy overwrite="true" file="${pluginFolder}/TranslatedStrings_fr.txt"
              tofile="${pluginFolder}/TranslatedStrings_ko.txt"/>
        <copy overwrite="true" file="${pluginFolder}/TranslatedStrings_fr.txt"
              tofile="${pluginFolder}/TranslatedStrings_nl.txt"/>
        <copy overwrite="true" file="${pluginFolder}/TranslatedStrings_fr.txt"
              tofile="${pluginFolder}/TranslatedStrings_pt.txt"/>
        <copy overwrite="true" file="${pluginFolder}/TranslatedStrings_fr.txt"
              tofile="${pluginFolder}/TranslatedStrings_sv.txt"/>
        <copy overwrite="true" file="${pluginFolder}/TranslatedStrings_fr.txt"
              tofile="${pluginFolder}/TranslatedStrings_zh_cn.txt"/>
        <copy overwrite="true" file="${pluginFolder}/TranslatedStrings_fr.txt"
              tofile="${pluginFolder}/TranslatedStrings_zh_tw.txt"/>
    </target>

    <target name="modify-version">
        <tstamp/>
        <!--exec executable="${svnversion}" outputproperty="svnversionOutput" /-->
        <property name="versionString" value="${DSTAMP}"/>
        <!--(SVN ${svnversionOutput})-->
        <replaceregexp file="${src}/Info.lua"
                       match="Version:.*"
                       replace="Version: ${versionString}"
                />
        <replaceregexp file="${src}/Info.lua"
                       match="(VERSION.*display *= *)&quot;.*&quot;"
                       replace="\1&quot;${versionString}&quot;"
                />
    </target>

    <target name="precompile" depends="init">
        <taskdef name="javapc" classname="au.songdi.javapc.ant.JavaPCTask" classpath="javapc.jar"/>
        <javapc srcdir="${src}" destdir="${build}" commentmark="--"/>
    </target>

    <target name="compile" depends="copy-resources, precompile">
        <apply executable="${luac}" type="file" verbose="true">
            <arg value="-s"/>
            <arg value="-o"/>
            <targetfile/>
            <fileset dir="${build}/lightroomBirding.lrdevplugin">
                <include name="**/*.lua"/>
            </fileset>
            <mapper type="glob" from="*.lua" to="${pluginFolder}/*.lua"/>
        </apply>
    </target>

    <target name="dist" depends="modify-version, compile">
        <zip destfile="${pluginDeploymentUnit}" basedir="${build}">
            <include name="${pluginFolderName}/**"/>
        </zip>
    </target>

    <target name="install" depends="dist">
        <unzip src="${pluginDeploymentUnit}" dest="${lrPluginFolder}" overwrite="true"/>
    </target>
</project>